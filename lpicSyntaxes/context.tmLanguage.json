{
  "information_for_contributors": [
    "This json file was auto generated by a much-more-readable ruby file",
    "(e.g. don't edit it directly)"
  ],
  "version": "de5bafcd1b5c10e0fe6a6e994f6d352bd80e0bcf",
  "name": "ConTeXt",
  "scopeName": "text.tex.context",
  "fileTypes": [
    "tex"
  ],
  "patterns": [
    {
      "include": "#keyword_operator_parentheses_context"
    },
    {
      "include": "#string_other_math_tex"
    },
    {
      "include": "#constant_character_escape_tex"
    },
    {
      "include": "#comment_line_percentage_tex"
    },
    {
      "include": "#meta_it_context"
    },
    {
      "include": "#meta_bf_context"
    },
    {
      "include": "#meta_bi_context"
    },
    {
      "include": "#meta_function_section_context"
    },
    {
      "include": "#meta_scope_tex_metafun"
    },
    {
      "include": "#meta_scope_lua"
    },
    {
      "include": "#meta_scope_lua_0"
    },
    {
      "include": "#meta_context_starttext"
    },
    {
      "include": "#meta_context_stoptext"
    },
    {
      "include": "#meta_context_group_arguments"
    },
    {
      "include": "#keyword_operator_braces_context"
    },
    {
      "include": "#meta_context_environment"
    },
    {
      "include": "#storage_type_function_tex"
    },
    {
      "include": "#support_function_general_tex"
    }
  ],
  "repository": {
    "comment_line_percentage_tex": {
      "match": "(%).*$\\n?",
      "captures": {
        "1": {
          "name": "punctuation.definition.comment.tex.tex.context"
        }
      },
      "name": "comment.line.percentage.tex.tex.context"
    },
    "constant_character_escape_tex": {
      "match": "(\\\\)[^a-zA-Z@]",
      "captures": {
        "1": {
          "name": "punctuation.definition.keyword.tex.tex.context"
        }
      },
      "name": "constant.character.escape.tex.tex.context"
    },
    "keyword_operator_braces_context": {
      "match": "[\\[\\]\\{\\}]",
      "name": "keyword.operator.braces.context.tex.context"
    },
    "keyword_operator_parentheses_context": {
      "match": "[\\(\\)]",
      "name": "keyword.operator.parentheses.context.tex.context"
    },
    "meta_bf_context": {
      "begin": "\\{\\\\bf\\s+",
      "end": "\\}",
      "beginCaptures": {
        "0": {
          "name": "support.function.bf.context.tex.context"
        }
      },
      "endCaptures": {
        "0": {
          "name": "support.function.bf.context.tex.context"
        }
      },
      "name": "meta.bf.context.tex.context",
      "contentName": "markup.bold.context",
      "patterns": [
        {
          "include": "#text_tex_context"
        }
      ]
    },
    "meta_bi_context": {
      "begin": "\\{\\\\bi\\s+",
      "end": "\\}",
      "beginCaptures": {
        "0": {
          "name": "support.function.bi.context.tex.context"
        }
      },
      "endCaptures": {
        "0": {
          "name": "support.function.bi.context.tex.context"
        }
      },
      "name": "meta.bi.context.tex.context",
      "contentName": "markup.bolditalic.context",
      "patterns": [
        {
          "include": "#text_tex_context"
        }
      ]
    },
    "meta_context_environment": {
      "begin": "(\\\\start)([a-zA-Z]+)",
      "end": "(\\\\stop)(?:\\2)",
      "beginCaptures": {
        "1": {
          "name": "keyword.control.enviromnent.context.tex.context"
        },
        "2": {
          "name": "keyword.control.enviromnent.variable.tex.context"
        }
      },
      "endCaptures": {
        "1": {
          "name": "keyword.control.enviromnent.context.tex.context"
        }
      },
      "name": "meta.context.environment.tex.context",
      "patterns": [
        {
          "include": "#text_tex_context"
        }
      ]
    },
    "meta_context_group_arguments": {
      "begin": "\\[",
      "end": "\\]",
      "beginCaptures": {
        "0": {
          "name": "keyword.operator.braces.context.tex.context"
        }
      },
      "endCaptures": {
        "0": {
          "name": "keyword.operator.braces.context.tex.context"
        }
      },
      "name": "meta.context.group.arguments.tex.context",
      "patterns": [
        {
          "match": "(\\[a\\-zA\\-Z\\]\\+)(=)",
          "captures": {
            "1": {
              "name": "variable.parameter.function-call.context.tex.context"
            },
            "2": {
              "name": "keyword.operator.assignment.context.tex.context"
            }
          }
        },
        {
          "match": ",",
          "name": "punctuation.separator.arguments.context.tex.context"
        },
        {
          "include": "#text_tex_context"
        }
      ]
    },
    "meta_context_starttext": {
      "match": "(\\\\starttext\\W)",
      "captures": {
        "1": {
          "name": "keyword.control.document.context.tex.context"
        }
      },
      "name": "meta.context.starttext.tex.context"
    },
    "meta_context_stoptext": {
      "match": "(\\\\stoptext\\W)",
      "captures": {
        "1": {
          "name": "keyword.control.document.context.tex.context"
        }
      },
      "name": "meta.context.stoptext.tex.context"
    },
    "meta_function_section_context": {
      "match": "(\\\\(?:part|title|chapter|(?:sub)*(?:section|subject)))\\s*(\\{.*?\\})",
      "captures": {
        "1": {
          "name": "support.function.section.context.tex.context"
        },
        "2": {
          "name": "entity.name.section.context.tex.context"
        }
      },
      "name": "meta.function.section.context.tex.context"
    },
    "meta_it_context": {
      "begin": "\\{\\\\it\\s+",
      "end": "\\}",
      "beginCaptures": {
        "0": {
          "name": "support.function.it.context.tex.context"
        }
      },
      "endCaptures": {
        "0": {
          "name": "support.function.it.context.tex.context"
        }
      },
      "name": "meta.it.context.tex.context",
      "contentName": "markup.italic.context",
      "patterns": [
        {
          "include": "#text_tex_context"
        }
      ]
    },
    "meta_scope_lua": {
      "begin": "\\\\startlua",
      "end": "\\\\stoplua",
      "beginCaptures": {
        "0": {
          "name": "keyword.control.document.context.tex.context"
        }
      },
      "endCaptures": {
        "0": {
          "name": "keyword.control.document.context.tex.context"
        }
      },
      "name": "meta.scope.lua.tex.context",
      "patterns": [
        {
          "include": "#source_lua"
        }
      ]
    },
    "meta_scope_lua_0": {
      "begin": "\\\\ctxlua\\s*{",
      "end": "}",
      "beginCaptures": {
        "0": {
          "name": "support.function.document.context.tex.context"
        }
      },
      "endCaptures": {
        "0": {
          "name": "support.function.document.context.tex.context"
        }
      },
      "name": "meta.scope.lua.tex.context",
      "patterns": [
        {
          "include": "#source_lua"
        }
      ]
    },
    "meta_scope_tex_metafun": {
      "begin": "\\\\start((?:unique|use|reusable)?)MP(code|inclusions|graphic)",
      "end": "\\\\stop(?:\\1)MP(?:\\2)",
      "beginCaptures": {
        "0": {
          "name": "keyword.control.document.context.tex.context"
        },
        "1": {
        },
        "2": {
        }
      },
      "endCaptures": {
        "0": {
          "name": "keyword.control.document.context.tex.context"
        }
      },
      "name": "meta.scope.tex.metafun.tex.context",
      "patterns": [
        {
          "include": "#source_metafun"
        }
      ]
    },
    "storage_type_function_tex": {
      "match": "\\\\define[A-Za-z]*(?![a-zA-Z])",
      "name": "storage.type.function.tex.tex.context"
    },
    "string_other_math_tex": {
      "begin": "\\$",
      "end": "\\$",
      "beginCaptures": {
        "0": {
          "name": "punctuation.definition.string.begin.tex.tex.context"
        }
      },
      "endCaptures": {
        "0": {
          "name": "punctuation.definition.string.end.tex.tex.context"
        }
      },
      "name": "string.other.math.tex.tex.context",
      "patterns": [
        {
          "match": "\\\\$"
        },
        {
          "include": "#text_tex_math"
        },
        {
          "include": "$self"
        }
      ]
    },
    "support_function_general_tex": {
      "match": "\\\\[A-Za-z]+(?![a-zA-Z])",
      "name": "support.function.general.tex.tex.context"
    }
  }
}
#!/usr/bin/env ruby

require "ruby_grammar_builder"
require_relative "lib/patterns"

lpicG = Grammar.new(
  name: "LPiC",
  scope_name: "source.lpic",
  fileTypes: [ "tex" ],
  firstLineMatch: "^%+\\s[lL][pP][iI][cC]",
  version: "0.0.1",
  information_for_contributors: [
    "This json file was auto generated by a much-more-readable ruby file",
    "(e.g. don't edit it directly)",
  ],
)

def createCodeRange(codeName, codeType)
  capCodeType = codeType.clone
  capCodeType[0] = capCodeType[0].upcase
  return PatternRange.new(
    tag_as: "source.#{codeName}",
    start_pattern: Pattern.new(
      match:
        Pattern.new(/\\start/)
        .then(Pattern.new(
          match: capCodeType,
          tag_as: "keyword.control.source.type"
        )).then(/\W/),
      tag_as: "keyword.control.source.start"
    ),
    end_pattern: Pattern.new(
      match:
        Pattern.new(/\\stop/)
        .then(Pattern.new(
          match: capCodeType,
          tag_as: "keyword.control.source.type"
        )).then(/\W/),
      tag_as: "keyword.control.source.stop"
    )
  )
  end

lpicG[:ccode]   = createCodeRange('c', 'cCode')
lpicG[:cheader] = createCodeRange('c', 'cHeader')

lpicG[:$initial_context] = [
  :ccode,
  :cheader
]

lpicG.save_to(
    syntax_name: "lpic",
    syntax_dir: "../lpicSyntaxes",
    tag_dir: "../lpicSyntaxes",
)
